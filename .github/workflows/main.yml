#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Set up secrets in your workspace: GKE_PROJECT with the name of the project, GKE_EMAIL with the service account email, GKE_KEY with the Base64 encoded JSON service account key (https://github.com/GoogleCloudPlatform/github-actions/tree/docs/service-account-key/setup-gcloud#inputs).
#
# 3. Change the values for the GKE_ZONE, GKE_CLUSTER, IMAGE, REGISTRY_HOSTNAME and DEPLOYMENT_NAME environment variables (below).

name: Build and Deploy to GKE

on:
  push:
    branches: 
      - '*'
  pull_request:
    branches: [ master ]

# Environment variables available to all jobs and steps in this workflow
env:
  GITHUB_SHA: ${{ github.sha }}
  REGISTRY_HOSTNAME: gcr.io
  DEPLOYMENT_NAME: gke-test
  GCP_PROJECT_ID: otters-cc

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    steps:
    - name: Environment variables
      run: |
        env
    - name: Checkout
      uses: actions/checkout@v2

    - name: Env
      run: |
        env
        sudo apt-get install gettext
        cat k8s/deployment.yaml | envsubst

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@master
      with:
        project_id: ${{ secrets.GCP_PROJECT_ID }}
        service_account_key: ${{ secrets.GCP_SA_KEY }}
        export_default_credentials: true

    - name: Use gcloud CLI
      run: gcloud info

    # Configure docker to use the gcloud command-line tool as a credential helper
    - run: |
        # Set up docker to authenticate
        # via gcloud command-line tool.
        gcloud auth configure-docker
      
    # Build the Docker image
    - name: Build
      run: |        
        docker build -t $BUILD_IMAGE \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" .
    # Push the Docker image to Google Container Registry
    - name: Publish
      run: |
        docker push $BUILD_IMAGE
        
    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |
        gcloud container clusters get-credentials $GKE_CLUSTER --zone $GKE_ZONE --project $GKE_PROJECT
        cat k8s/namespace.yaml | envsubst
        cat k8s/namespace.yaml | envsubst | kubectl apply -f -
        cat k8s/deployment.yaml | envsubst
        cat k8s/deployment.yaml | envsubst | kubectl apply -n $NAMESPACE -f -
        cat k8s/service.yaml | envsubst
        cat k8s/service.yaml | envsubst | kubectl apply -n $NAMESPACE -f -
        kubectl rollout status deployment/$SERVICE_NAME -n $NAMESPACE
